;
; Copyright (c) 2020 Nordic Semiconductor ASA
;
; SPDX-License-Identifier: Apache-2.0
;

One = 1
Two = 2
Three = 3
Ten = 10

Numbers = [
	one: One,
	minustwo: -2,
	fourtoten: 4..Ten,
	twobytes: uint .size Two,
	onetofourbytes: uint .size 0b1..0o4, ; Testing binary and octal
	minusfivektoplustwohundred: -5000..200,
	fourbillion: 0xEE6B2800,
	negint: nint,
	posint: uint,
	tagged_int: #6.65535(int),
]

MyInt = int

Numbers2 = [
	threebytes: uint .size 4,
	int32: int .size 4,
	big_int: int .size 8,
	big_uint: uint .gt 0x100000000,
	big_uint2: uint .size 8,
	big_nint: -0x80000001,
	big_nint2: -0x80000000,
	tagged_int: #6.1234(MyInt),
]

TaggedUnion = #6.4321(bool) // #6.2345(uint)

; Using .size and .cbor together with maps.
NumberMap = {
	"byte" => uint .size 1,
	? "opt_short" => uint .size 2,
	? "opt_cbor" => bstr .size 5 .cbor (uint .size 4),
}

Strings = [
	hello: "hello",
	threehundrebytebstr: bstr .size 300,
	#6.0(tentothirtybytetstr: tstr .size 10..30),
	cborNumbers: bstr .cbor Numbers,
	cborseqSimples: bstr .cborseq Simples,
	?optCborStrings: bstr .cbor Strings,
]

Simples = [
	booltrue: true,
	boolfalse: false,
	boolval: bool,
	nilval: nil,
	undef: undefined,
]

Simple1 = Simples
Simple2 = Simple1

Optional = [
	#6.10(boolval: bool),
	?optbool: bool,
	?opttwo: 2,
	manduint: uint,
	*multi8: 8,
]

Group = (1,-2)
MultiGroup = +(3,-4)
Union = Group / MultiGroup / (3,4) / "\"hello\""

Map = {
	listkey: ((([5,6] => bool))),
	union: (7=>uint) / (-8=>uint),
	twotothree: (2*3 (nil => bstr)),
}

EmptyMap = {}

NestedListMap = [*{?1 => 4}]
NestedMapListMap = {+[] => [*{}]}

Level1 = [Level2]
Level2 = [2**3Level3] ; Use ** here to test backwards compatibility.
Level3 = [4*5Level4]
Level4 = [0]

Range = [
	?optMinus5to5: -5..5,
	?optStr3to6: tstr .size 3..6,
	?optMinus9toMinus6excl: -9...-6,
	+multi8: 8,
	+multiHello: "hello",
	+multi0to10: 0..0x0A, ; Testing hexadecimal
]

ValueRange = [
	greater10: uint .gt 10,
	less1000: int .lt 1000,
	greatereqmin10: int .ge -10,
	lesseq1: uint .le 1,
	equal42: uint .eq 42,
	equalstrworld: tstr .eq "world",
	equalpi: float .size 8 .eq ((( 3.14 ))),
	equaltrue: bool .eq true,
	default3: ?int .gt 2 .default Three,
	defaulthello: ?bstr .default ((('hello'))),
	defaulte: ?float .size 4 .default 2.72,
	defaultfalse: ?bool .default false,
]

SingleBstr = bstr

SingleInt = 52

SingleInt2 = uint .lt 10

Unabstracted = [
	unabstractedunion1: (choice1: 1 // choice2: 2),
	(unabstractedunion2: 3 / choice4: 4)
]

QuantityRange = (
	upto4nils: 0*0x04nil,
	from3true: 3*true,
)

MyKeys = (
	?1 => int,
	?2 => int
)

DoubleMap = {
	* (uint => { MyKeys })
}

Floats = [
	float_16: float16,
	float_32: float32,
	float_64: float64,
	pi: 3.1415,
	e: 2.71828 .size 8,
	floats: *float,
]

; Test using ranges (greater/less than) on floats.
Floats2 = [
	float_lt_1: float .lt 1,
	float_ge_min_10000: float .ge -10000,
]

Floats3 = [
	float_16_32: float16-32,
	float_32_64: float32-64,
]

Prelude = [
	bytes,
	text,
	tdate,
	time,
	number,
	biguint,
	bignint,
	bigint,
	integer,
	unsigned,
	decfrac,
	bigfloat,
	eb64url,
	eb64legacy,
	eb16,
	encoded-cbor,
	uri,
	b64url,
	b64legacy,
	regexp,
	mime-message,
	cbor-any,
	float16-32,
	float32-64,
	null,
]

; Testing complex .cbor statements, including nested .cbor.
CBORBstr = bstr .cbor ([
	hello: bstr .cbor "Hello",
	pi: bstr .cbor 3.1415,
	big_uint_bstr: (bstr .cbor biguint),
	nilval2: bstr .cbor nil
])


result_code = int
mac_address = bstr .size 6
uuid = bstr .size 16

; Test combination of map + optional + * + size check
MapLength = {
	"r" : (result:result_code),
	"m" : (mac_addr:mac_address),
	?"e" : (end_device_array:[* uuid]),
}

Structure_One = (
	id: 1,
	some_array: bstr
)

UnionInt1 = [
	(union_uint1: 5, "This is a five") //
	(union_uint2: 1000, bstr) //
	(union_uint3: -100000, null, number)
]

UnionInt2 = [
	(5, "This is a five") //
	(1000, bstr) //
	(-100000, null, number) //
	Structure_One
]

Intmax1 = [
	INT_8_MIN: -0x80,
	INT_8_MAX: 0x7F,
	UINT_8_MAX: 0xFF,
	INT_16_MIN: -0x8000,
	INT_16_MAX: 0x7FFF,
	UINT_16_MAX: 0xFFFF,
	INT_32_MIN: -0x80000000,
	INT_32_MAX: 0x7FFFFFFF,
	UINT_32_MAX: 0xFFFFFFFF,
	INT_64_MIN: -0x8000000000000000,
	INT_64_MAX: 0x7FFFFFFFFFFFFFFF,
	UINT_64_MAX: 0xFFFFFFFFFFFFFFFF,
]

Intmax2 = [
	INT_8: -0x80..0x7F,
	UINT_8: 0..0xFF,
	INT_16: -0x8000..0x7FFF,
	UINT_16: 0..0xFFFF,
	INT_32: -0x80000000..0x7FFFFFFF,
	UINT_32: 0..0xFFFFFFFF,
	INT_64: -0x8000000000000000..0x7FFFFFFFFFFFFFFF,
	UINT_64: 0..0xFFFFFFFFFFFFFFFF,
]

Intmax3 = [
	(254 / 255),
	int .le 65535,
	{-128 => bstr .size 127},
]

; Test _pexpect()
Intmax4 = [
	*INT_8_MIN: -0x80,
	*INT_8_MAX: 0x7F,
	*UINT_8_MAX: 0xFF,
	*INT_16_MIN: -0x8000,
	*INT_16_MAX: 0x7FFF,
	*UINT_16_MAX: 0xFFFF,
	*INT_32_MIN: -0x80000000,
	*INT_32_MAX: 0x7FFFFFFF,
	*UINT_32_MAX: 0xFFFFFFFF,
	*INT_64_MIN: -0x8000000000000000,
	*INT_64_MAX: 0x7FFFFFFFFFFFFFFF,
	*UINT_64_MAX: 0xFFFFFFFFFFFFFFFF,
]

Intmax5 = [
	INT_8_MIN_PLUS1: -0x81,
	INT_8_MAX_PLUS1: 0x80,
	UINT_8_MAX_PLUS1: 0x100,
	INT_16_MIN_PLUS1: -0x8001,
	INT_16_MAX_PLUS1: 0x8000,
	UINT_16_MAX_PLUS1: 0x10000,
	INT_32_MIN_PLUS1: -0x80000001,
	INT_32_MAX_PLUS1: 0x80000000,
	UINT_32_MAX_PLUS1: 0x100000000,
]

Intmax6 = [
	INT_8_PLUS1: -0x80..0x80,
	UINT_8_PLUS1: -1..0xFF,
	INT_16_PLUS1: -0x8001..0x7FFF,
	UINT_16_PLUS1: 0..0x10000,
	INT_32_PLUS1: -0x80000000..0x80000000,
	UINT_32_PLUS1: 0..0x100000000,
]

DefaultInt = [
	int,
	uint,
]

InvalidIdentifiers = [
	? "1one",
	? Ø: 2,
	? "{[a-z]}",
]

Uint64List = [
	* uint64: uint .size 8,
	? nint64: nint .size 8,
	? uint64_lit: 0x0123456789abcdef,
	* nint64_lit: -0x0123456789abcdef,
]

BstrSize = {
	bstr12,
	check: ("c" => bstr .size 16 / bstr .size 0),
}
bstr12 = ("s" : bstr .size 12)

; found in https://github.com/NordicSemiconductor/zcbor/pull/398
MapUnionPrimAlias = {
	(0: 0) /
	(1: int) /
	(2: nil) /
	(3: m_nil) /
	(4: mm_nil) /
	(5: m_int) /
	(6: m_6)
}
m_nil = nil
mm_nil = m_nil
m_int = int
m_6 = 6

; Doesn't need test code, it's tested when the struct is compiled.
Keywords = [
	_Alignas: int,
	_Alignof: int,
	_Atomic: int,
	_BitInt: int,
	_Bool: int,
	_Complex: int,
	_Decimal128: int,
	_Decimal32: int,
	_Decimal64: int,
	_Generic: int,
	_Imaginary: int,
	_Noreturn: int,
	_Pragma: int,
	_Static_assert: int,
	_Thread_local: int,
	alignas: int,
	alignof: int,
	atomic_bool: int,
	atomic_int: int,
	auto: int,
	bool,
	break: int,
	case: int,
	char: int,
	complex: int,
	const: int,
	constexpr: int,
	continue: int,
	default: int,
	do: int,
	double: int,
	else: int,
	enum: int,
	extern: int,
	false,
	float,
	for: int,
	goto: int,
	if: int,
	imaginary: int,
	inline: int,
	int,
	long: int,
	noreturn: int,
	nullptr: int,
	register: int,
	restrict: int,
	return: int,
	short: int,
	signed: int,
	sizeof: int,
	static: int,
	static_assert: int,
	struct: int,
	switch: int,
	thread_local: int,
	true,
	typedef: int,
	typeof: int,
	typeof_unqual: int,
	union: int,
	unsigned,
	void: int,
	volatile: int,
	while: int]

EmptyGroup = ()
EmptyList = []

EmptyContainer = [int, EmptyGroup, EmptyList, EmptyMap]

SingleElemList = [
    [tstr],
    [[MyInt]],
    [true],
    {1: bstr},
]

Choice1 = nil / [ * [tstr] ]
Choice2 = nil / ([ * [tstr] ])
Choice3 = nil / ([ * ([tstr])/nil ])
Choice4 = nil / ([ * ([[Choice3]])/nil ])
Choice5 = nil / ([ * {*int=>[tstr]}/nil ])

OptList = [
	optlist_int: int,
	?optlist: [uint],
]

; Unicode test case adapted from updated CDDL spec (https://datatracker.ietf.org/doc/html/rfc9682)
UnicodeEscape = [a, b, c, d, x, y, z]
UnicodeEscapeTstr = [a, b, c, d]

; "🁳", DOMINO TILE VERTICAL-02-02, and
; "⌘", PLACE OF INTEREST SIGN, in a text string:
a = "D\u{6f}mino's \u{1F073} + \u{2318}"      ; \u{}-escape 3 chars
b = "Domino's \uD83C\uDC73 + \u2318"          ; escape JSON-like
c = "Domino's 🁳 + ⌘"                         ; unescaped
d = "Domino's \U0001F073 + \U00002318"        ; \U{}-escape 2 chars

; in a byte string given as text, the ' needs to be escaped:
x = 'D\u{6f}mino\u{27}s \u{1F073} + \u{2318}' ; \u{}-escape 4 chars
y = 'Domino\'s \uD83C\uDC73 + \u2318'         ; escape JSON-like
z = 'Domino\'s 🁳 + ⌘'                        ; escape ' only

AmbigList = [
	?emptylist: [],
	intlist: *[+int],
	tstrlist: [+int, +tstr],
]
